# the yaml version for assignment 3 grading
fullmark: 100
signature: by cxz
Sudoku class: # section for question 1
    total: 40
    sort(): # subsection
        total: 10
        deduction: # if required action is absent, points deducted
            sort a copy instead of sorting on input: 5
            handle duplicates properly: 3
            avoid off-by-one error: 1
    uniqueEntries():
        total: 5
        deduction: 
            call the sort() instead of presuming a sorted input: 3
    getColumn():
        total: 3
    flatten():
        total: 6
    subGrid():
        total: 8
        deduction: 
            catch and handle index out of bounds error: 3
            take i as row and j as column, instead of reversed: 1
    isSudoku():
        total: 8
        deduction:
            have good assumption to avoid crash: 3
            handle null input: 1
            check the rows: 1
            check the columns: 1
            check the correct sub-grids: 2
            check the range (1-9): 1
            check the length of all arrays: 1
            combine all results properly: 2
            have a public modifier: 1
    overall: # where subject should be the section title
        deduction:
            avoid modifying the input: 5
cards and card games: # section for question 2, 3 and 4
    total: 60
    Card class: # sub section for question 2, likewise in the following
        total: 10
        deduction:
            have a proper constructor and getters: 5
            have a correct toString(): 5
    CardPile class:
        total: 40
        deduction:
            have a functional constructor: 2
            # this below is a nondeductin reminder
            keep the constructor free of extra input arguments: 4 
            have a correct addToBottom(): 4
            have a correct isEmpty(): 2
            have a correct get(): 2
            have a correct remove(): 8
            have a correct find(): 8
            have a correct toString(): 8
            have a functional makeFullDeck(): 6
            have makeFullDeck() return CardPile object instead of Card[]: 6
    CardGame class:
        total: 10
        deduction:
            initialize the pile and then deal all cards out: 5
            search for the ace of spades: 4
            print the winner: 1
overall:
    deduction:
        avoid using EXTRA PUBLIC methods: 0